name: Test

on:
  push:
  workflow_dispatch:

env:
  TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Validate services.json file 
        run: |
          python -c '
          import json

          class InvalidJSON(Exception):
              pass

          class MissingKey(Exception):
              pass

          class InvalidType(Exception):
              pass

          class DuplicateValue(Exception):
              pass

          expected_keys = [
              ("name", str),
              ("base_url", str),
              ("authorization_key_identifier", str),
          ]

          with open("services.json") as f:
              services=None 
              try:
                  services: list[dict] = json.load(f)
              except json.JSONDecodeError as e:
                  raise InvalidJSON(e)
              
              names = set()
              base_urls = set()
              authorization_keys = set()

              for j in range (len(services)):
                  for i in range(len(expected_keys)):
                      if expected_keys[i][0] not in services[j]:
                          raise MissingKey(expected_keys[i][0] + " in service " + str(services[j]))

                      if not isinstance(services[j][expected_keys[i][0]], expected_keys[i][1]):
                          raise InvalidType(
                              "Key "
                              + expected_keys[i][0]
                              + " is not of type "
                              + str(expected_keys[i][1])
                          )
                  
                  if services[j]["name"] in names:
                      raise DuplicateValue("name " + services[j]["name"])
                  
                  names.add(services[j]["name"])
                  
                  if services[j]["base_url"] in base_urls:
                      raise DuplicateValue("base_url " + services[j]["base_url"])
                  
                  base_urls.add(services[j]["base_url"])

                  if services[j]["authorization_key_identifier"] != "":
                      if services[j]["authorization_key_identifier"] in authorization_keys:
                          raise DuplicateValue("authorization_key_identifier " + services[j]["authorization_key_identifier"])
                      authorization_keys.add(services[j]["authorization_key_identifier"])
              
          print("Valid JSON")
          '
          
      - name: Build Docker Image
        run: |
          docker build -t $TAG .
        
      - name: Run Tests 
        run: docker run -e INTERNAL_KEY=test $TAG go test ./... -v
